/*
  Creates a search button that call the github api
  and returns the data of the searched user

  The data is client side fetched
*/
import { useCallback, useRef, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect } from "react";
import styles from "../styles/Home.module.css";
import { type } from "os";
import { emptyGithubUser, GithubUser } from "../model/GithubUser";
import UserCard from "../components/UserCard";
import UserNotFound from "../components/UserNotFound";
import { GithubError } from "../model/GithubError";
import { useRouter } from "next/router";

const Home: NextPage = () => {
  // States
  const [user_not_found, setUserNotFound] = useState<boolean>(false);
  const [is_data_valid, setIsDataValid] = useState<boolean>(false);
  const [data, setData] = useState<GithubUser>(emptyGithubUser());

  const router = useRouter();
  // every time the url changes, the useEffect will be called
  useEffect(() => {
    const username = router.query.username;
    if (username != undefined) {
      doSearch(true);
    }
  }, [router]);

  const doSearch = async (use_url: boolean = false) => {
    const input_value = (document.getElementById("username_input") as HTMLInputElement).value;
    let username_input: string = use_url
      ? (router.query.username as string) || ""
      : input_value;

    if (username_input === "") {
      setUserNotFound(false);
      setIsDataValid(false);
      return;
    }

    await fetch(`/api/user/${username_input}`)
      .then((response: Response) => response.json())
      .then((data: GithubUser | GithubError) => {
        // if data is a GithubError
        if (data.hasOwnProperty("message")) {
          setUserNotFound(true);
          setIsDataValid(false);
        } else {
          setUserNotFound(false);
          setIsDataValid(true);
          setData(data as GithubUser);
        }
      })
      .catch((error: Error) => {
        setUserNotFound(true);
        setIsDataValid(false);
      });
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Github Profile Card App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <input
            type="text"
            id="username_input"
            placeholder="User name"
            onKeyPress={(e) => {
              if (e.key === "Enter") {
                doSearch();
              }
            }}
          />
          <button onClick={((e) => {
            doSearch();
          })}>
          Search ðŸ”Ž</button>
        </div>

        <div className={styles.grid}>
          {is_data_valid ? (
            <UserCard user={data} />
          ) : user_not_found ? (
            <UserNotFound />
          ) : (
            <div></div>
          )}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
